#include <iostream>
#include <cstdint>
using namespace std;

bool isNumberInRange(uint32_t number, uint32_t lowerBound, uint32_t upperBound) {
    return (number >= lowerBound && number <= upperBound);
}

int main()
{
    uint32_t size = 33;

    if (isNumberInRange(size, 1, 8)) {
        cout << "Unsigned char" << endl;
    } else if (isNumberInRange(size, 9, 16)) {
        cout << "Unsigned short" << endl;
    } else if (isNumberInRange(size, 17, 32)) {
        cout << "Unsigned int" << endl;
    } else if (isNumberInRange(size, 33, 64)) {
        cout << "Unsigned long " << endl;
    }

    cout << "Hello World!" << endl;
    return 0;
}

-------------------------------------------------------------------------------
#include <iostream>
#include <random>

using namespace std;

int main(void) {
    random_device rd;
    mt19937_64 engine(rd());
    uniform_int_distribution<unsigned long long> distribute(0, numeric_limits<unsigned long long>::max());


    uniform_int_distribution<unsigned long long>::param_type newParams(0, numeric_limits<unsigned char>::max());
    distribute.param(newParams);

    // for(int repetition=0; repetition<100000000; repetition++) {
    //     distribute(engine);
    // }

    // for(int repetition=0; repetition<10; repetition++) {
    //     cout << distribute(engine) << endl;
    // }

    cout << "Numeric Limits: long long: " << numeric_limits<long long>::max() << endl;
    cout << "Numeric Limits: unsigned long long: " << numeric_limits<unsigned long long>::max() << endl;
    cout << "Numeric Limits: short: " << numeric_limits<short>::max() << endl;
    cout << "Numeric Limits: unsigned short: " << numeric_limits<unsigned short>::max() << endl;

    cout << "Numeric Limits: int: " << numeric_limits<int>::max() << endl;
    cout << "Numeric Limits: unsigned int: " << numeric_limits<unsigned int>::max() << endl;

    return 0;
}

// uniform_int_distribution<unsigned long long>::param_type newParams(10, 50);
// distribute.param(newParams);

-------------------------------------------------------------------------------
#include <iostream>
#include <vector>
using namespace std;

void func( vector<pair<int, string>> y ) {
    vector<pair<int, string>> x = y;
    for (const auto& item : x) {
        cout << item.first << ": " << item.second << endl;
    }
}

int main() {
    
    // Creating a pair of int and string
    pair<int, string> p1 = {1, "Geeks"};

    vector<pair<int, string>> v1;
//        = {
//          {1, "One"},
//          {2, "two"},
//          {3, "three"},
//          };

    v1 = {
                                   {1, "One"},
                                   {2, "two"},
                                   {3, "three"},
                                   };

    v1 = {};
    func(v1);
    func({{1, "One"},{2, "two"},{3, "three"}});
    return 0;
}

-------------------------------------------------------------------------------
#include <iostream>
#include <random>
#include <cstdint>
#include <string>
 
using namespace std;

struct cea_field_random {
    uint64_t seed;
    mt19937 engine;
    uniform_int_distribution<> udist;
    discrete_distribution<> wdist;
};

int main() {
    random_device rd;
    cea_field_random rnd;
    
    rnd.seed = rd();
    // rnd.seed = 12345;

    cout << string(30, '-') << endl;
    cout << "Seed: " << rnd.seed << endl;

    rnd.engine.seed(rnd.seed);

    // WEIGHTED Distribution
    vector<double>weights = {1.1, 3.3, 0.5, 2.2};
    discrete_distribution<>::param_type wd(weights.begin(), weights.end());
    rnd.wdist.param(wd);
    cout << string(30, '-') << endl;
    uint32_t idx;
    for (uint32_t i=0; i<10; i++) {
        idx = rnd.wdist(rnd.engine);
        cout << weights[idx] << endl;
    }

    // UNIFORM Distribution
    uniform_int_distribution<int>::param_type d2(2, 10);
    rnd.udist.param(d2);
    cout << rnd.udist << endl;

    cout << string(30, '-') << endl;
    for (uint32_t i=0; i<10; i++)
        cout << rnd.udist(rnd.engine) << endl;

    return 0;
}

-------------------------------------------------------------------------------


