#include <iostream>
#include <string>
#include <regex>

using namespace std;

int main() {

   string mac_addr = "aa:bb:cc:dd:ee:0f";
   if (regex_match (mac_addr, regex("([[:xdigit:]]{2}[:]?){5}[[:xdigit:]]{2}") ))
       cout << "Matched MAC Address\n";
   else
       cout << "Not Matched MAC Address\n";

   string ipv4_addr = "255.255.255.255";
   if (regex_match (ipv4_addr, regex("^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])[.]){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$") ))
       cout << "Matched IPv4 address\n";
   else
       cout << "Not Matched IPv4 address\n";

   string ipv6_addr = "2001:0db8:85a3:0000:0000:8a2e:0370:7334";
   regex ipv6("((([0-9a-fA-F]){1,4})[:]){7}([0-9a-fA-F]){1,4}");
   if (regex_match(ipv6_addr, ipv6))
       cout << "Matched IPv6 address\n";
   else
       cout << "Not Matched IPv6 address\n";

    string preamble = "ababababababab12";
    regex pre("[[:xdigit:]]{16}");
    if (regex_match(preamble, pre))
        cout << "Matched preamble\n";
    else
        cout << "Not Matched preamble\n";


    return 0;
}

/*
 *
 * std::regex ipv6_regex(
    "^\\s*("
    "([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:)|"
    "(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|"
    "(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|"
    "(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))?)|:))|"
    "(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))?)|:))|"
    "(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))?)|:))|"
    "(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))?)|:))|"
    "(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))?)|:))"
    ")(\\/(12[0-8]|1[0-1][0-9]|[1-9]?[0-9]))?\\s*$"
);
*/
